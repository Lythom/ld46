[{
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: GameState
		pack: []
		params: []
		sub: null
	}), {
		expr: EConst(CIdent(ShopEquip))
		pos: #pos
	})
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: gameState
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: String
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: playerName
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: List
		pack: []
		params: [TPType(TPath({
			name: Sorcerer
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: sorcerers
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: Chaleace
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: chaleace
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: List
		pack: []
		params: [TPType(TPath({
			name: Battle
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: battles
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: Shop
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: shop
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: Shelf
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: observe
		params: []
		pos: #pos
	}]
	name: shelf
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FProp(get, null, TPath({
		name: Array
		pack: []
		params: [TPType(TPath({
			name: BoardEntity
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: []
	name: boardEntities
	pos: #pos
}, {
	access: [APrivate]
	doc: notifyBattleResult event
	kind: FFun({
		args: [{
			meta: []
			name: w
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: emitNotifyBattleResult
	pos: #pos
}, {
	access: [APublic]
	doc: notifyBattleResult event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleW
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onNotifyBattleResult
	pos: #pos
}, {
	access: [APublic]
	doc: notifyBattleResult event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleW
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onceNotifyBattleResult
	pos: #pos
}, {
	access: [APublic]
	doc: notifyBattleResult event
	kind: FFun({
		args: [{
			meta: null
			name: handleW
			opt: true
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: offNotifyBattleResult
	pos: #pos
}, {
	access: [APublic, AInline]
	doc: Does it listen to notifyBattleResult event
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: listensNotifyBattleResult
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: playerName
			opt: false
			type: TPath({
				name: String
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EConst(CIdent(super))
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, gameState)
					pos: #pos
				}, {
					expr: EConst(CIdent(ShopEquip))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, playerName)
					pos: #pos
				}, {
					expr: EConst(CIdent(playerName))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(battles))
					pos: #pos
				}, {
					expr: ENew({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Battle
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(sorcerers))
					pos: #pos
				}, {
					expr: ENew({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Sorcerer
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(chaleace))
					pos: #pos
				}, {
					expr: ENew({
						name: Chaleace
						pack: []
						params: []
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(shop))
					pos: #pos
				}, {
					expr: ENew({
						name: Shop
						pack: []
						params: []
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(shelf))
					pos: #pos
				}, {
					expr: ENew({
						name: Shelf
						pack: []
						params: []
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(chaleace))
						pos: #pos
					}, boardConfiguredX)
					pos: #pos
				}, {
					expr: EConst(CInt(16))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(chaleace))
						pos: #pos
					}, boardConfiguredY)
					pos: #pos
				}, {
					expr: EConst(CInt(16))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ENew({
							name: Sorcerer
							pack: []
							params: []
							sub: null
						}, [])
						pos: #pos
					}
					isFinal: false
					name: sorc
					type: null
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(sorcerers))
						pos: #pos
					}, add)
					pos: #pos
				}, [{
					expr: EConst(CIdent(sorc))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredX)
					pos: #pos
				}, {
					expr: EConst(CInt(46))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredY)
					pos: #pos
				}, {
					expr: EConst(CInt(-52))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(sorc))
					pos: #pos
				}, {
					expr: ENew({
						name: Sorcerer
						pack: []
						params: []
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(sorcerers))
						pos: #pos
					}, add)
					pos: #pos
				}, [{
					expr: EConst(CIdent(sorc))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredX)
					pos: #pos
				}, {
					expr: EConst(CInt(130))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredY)
					pos: #pos
				}, {
					expr: EConst(CInt(45))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(sorc))
					pos: #pos
				}, {
					expr: ENew({
						name: Sorcerer
						pack: []
						params: []
						sub: null
					}, [])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(sorcerers))
						pos: #pos
					}, add)
					pos: #pos
				}, [{
					expr: EConst(CIdent(sorc))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredX)
					pos: #pos
				}, {
					expr: EConst(CInt(-95))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, boardConfiguredY)
					pos: #pos
				}, {
					expr: EConst(CInt(38))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ENew({
							name: StringMap
							pack: []
							params: [TPType(TPath({
								name: Int
								pack: []
								params: []
								sub: null
							}))]
							sub: null
						}, [])
						pos: #pos
					}
					isFinal: false
					name: counts
					type: null
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(shelf))
						pos: #pos
					}, onItemsChange)
					pos: #pos
				}, [{
					expr: EConst(CIdent(this))
					pos: #pos
				}, {
					expr: EFunction(FArrow, {
						args: [{
							meta: []
							name: current
							opt: false
							type: null
							value: null
						}, {
							meta: []
							name: _
							opt: false
							type: null
							value: null
						}]
						expr: {
							expr: EMeta({
								name: :implicitReturn
								params: []
								pos: #pos
							}, {
								expr: EReturn({
									expr: EBlock([{
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(counts))
												pos: #pos
											}, clear)
											pos: #pos
										}, [])
										pos: #pos
									}, {
										expr: EFor({
											expr: EBinop(OpIn, {
												expr: EConst(CIdent(item))
												pos: #pos
											}, {
												expr: EConst(CIdent(current))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: EVars([{
													expr: {
														expr: EBinop(OpAdd, {
															expr: ECall({
																expr: EField({
																	expr: EField({
																		expr: EField({
																			expr: EConst(CIdent(item))
																			pos: #pos
																		}, itemData)
																		pos: #pos
																	}, id)
																	pos: #pos
																}, toString)
																pos: #pos
															}, [])
															pos: #pos
														}, {
															expr: EField({
																expr: EConst(CIdent(item))
																pos: #pos
															}, level)
															pos: #pos
														})
														pos: #pos
													}
													isFinal: false
													name: idlvl
													type: null
												}])
												pos: #pos
											}, {
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(counts))
														pos: #pos
													}, set)
													pos: #pos
												}, [{
													expr: EConst(CIdent(idlvl))
													pos: #pos
												}, {
													expr: ETernary({
														expr: ECall({
															expr: EField({
																expr: EConst(CIdent(counts))
																pos: #pos
															}, exists)
															pos: #pos
														}, [{
															expr: EConst(CIdent(idlvl))
															pos: #pos
														}])
														pos: #pos
													}, {
														expr: EBinop(OpAdd, {
															expr: ECall({
																expr: EField({
																	expr: EConst(CIdent(counts))
																	pos: #pos
																}, get)
																pos: #pos
															}, [{
																expr: EConst(CIdent(idlvl))
																pos: #pos
															}])
															pos: #pos
														}, {
															expr: EConst(CInt(1))
															pos: #pos
														})
														pos: #pos
													}, {
														expr: EConst(CInt(1))
														pos: #pos
													})
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EFunction(FNamed(doMerge, false), {
											args: [{
												meta: []
												name: merged
												opt: false
												type: TPath({
													name: SorcererItem
													pack: []
													params: []
													sub: null
												})
												value: null
											}, {
												meta: []
												name: outs
												opt: false
												type: TPath({
													name: Array
													pack: []
													params: [TPType(TPath({
														name: SorcererItem
														pack: []
														params: []
														sub: null
													}))]
													sub: null
												})
												value: null
											}]
											expr: {
												expr: EBlock([{
													expr: EUnop(OpIncrement, true, {
														expr: EField({
															expr: EConst(CIdent(merged))
															pos: #pos
														}, level)
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EFor({
														expr: EBinop(OpIn, {
															expr: EConst(CIdent(out))
															pos: #pos
														}, {
															expr: EConst(CIdent(outs))
															pos: #pos
														})
														pos: #pos
													}, {
														expr: EBlock([{
															expr: ECall({
																expr: EField({
																	expr: EConst(CIdent(out))
																	pos: #pos
																}, triggerMergeInto)
																pos: #pos
															}, [{
																expr: EConst(CIdent(merged))
																pos: #pos
															}])
															pos: #pos
														}, {
															expr: ECall({
																expr: EField({
																	expr: EField({
																		expr: EConst(CIdent(ceramic))
																		pos: #pos
																	}, Timer)
																	pos: #pos
																}, delay)
																pos: #pos
															}, [{
																expr: EConst(CIdent(this))
																pos: #pos
															}, {
																expr: EConst(CFloat(0.45))
																pos: #pos
															}, {
																expr: EFunction(FArrow, {
																	args: []
																	expr: {
																		expr: EMeta({
																			name: :implicitReturn
																			params: []
																			pos: #pos
																		}, {
																			expr: EReturn({
																				expr: ECall({
																					expr: EField({
																						expr: EConst(CIdent(shelf))
																						pos: #pos
																					}, remove)
																					pos: #pos
																				}, [{
																					expr: EConst(CIdent(out))
																					pos: #pos
																				}])
																				pos: #pos
																			})
																			pos: #pos
																		})
																		pos: #pos
																	}
																	params: []
																	ret: null
																})
																pos: #pos
															}])
															pos: #pos
														}])
														pos: #pos
													})
													pos: #pos
												}])
												pos: #pos
											}
											params: []
											ret: null
										})
										pos: #pos
									}, {
										expr: EFor({
											expr: EBinop(OpArrow, {
												expr: EConst(CIdent(idlvl))
												pos: #pos
											}, {
												expr: EBinop(OpIn, {
													expr: EConst(CIdent(count))
													pos: #pos
												}, {
													expr: EConst(CIdent(counts))
													pos: #pos
												})
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: EIf({
													expr: EBinop(OpGte, {
														expr: EConst(CIdent(count))
														pos: #pos
													}, {
														expr: EConst(CInt(3))
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EBlock([{
														expr: EVars([{
															expr: {
																expr: ECall({
																	expr: EField({
																		expr: EConst(CIdent(current))
																		pos: #pos
																	}, filter)
																	pos: #pos
																}, [{
																	expr: EFunction(FArrow, {
																		args: [{
																			meta: []
																			name: item
																			opt: false
																			type: null
																			value: null
																		}]
																		expr: {
																			expr: EMeta({
																				name: :implicitReturn
																				params: []
																				pos: #pos
																			}, {
																				expr: EReturn({
																					expr: EBinop(OpEq, {
																						expr: EParenthesis({
																							expr: EBinop(OpAdd, {
																								expr: ECall({
																									expr: EField({
																										expr: EField({
																											expr: EField({
																												expr: EConst(CIdent(item))
																												pos: #pos
																											}, itemData)
																											pos: #pos
																										}, id)
																										pos: #pos
																									}, toString)
																									pos: #pos
																								}, [])
																								pos: #pos
																							}, {
																								expr: EField({
																									expr: EConst(CIdent(item))
																									pos: #pos
																								}, level)
																								pos: #pos
																							})
																							pos: #pos
																						})
																						pos: #pos
																					}, {
																						expr: EConst(CIdent(idlvl))
																						pos: #pos
																					})
																					pos: #pos
																				})
																				pos: #pos
																			})
																			pos: #pos
																		}
																		params: []
																		ret: null
																	})
																	pos: #pos
																}])
																pos: #pos
															}
															isFinal: false
															name: mergeables
															type: null
														}])
														pos: #pos
													}, {
														expr: ECall({
															expr: EConst(CIdent(doMerge))
															pos: #pos
														}, [{
															expr: ECall({
																expr: EField({
																	expr: EConst(CIdent(mergeables))
																	pos: #pos
																}, pop)
																pos: #pos
															}, [])
															pos: #pos
														}, {
															expr: EArrayDecl([{
																expr: ECall({
																	expr: EField({
																		expr: EConst(CIdent(mergeables))
																		pos: #pos
																	}, pop)
																	pos: #pos
																}, [])
																pos: #pos
															}, {
																expr: ECall({
																	expr: EField({
																		expr: EConst(CIdent(mergeables))
																		pos: #pos
																	}, pop)
																	pos: #pos
																}, [])
																pos: #pos
															}])
															pos: #pos
														}])
														pos: #pos
													}])
													pos: #pos
												}, null)
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EFor({
											expr: EBinop(OpIn, {
												expr: EConst(CIdent(s))
												pos: #pos
											}, {
												expr: EConst(CIdent(sorcerers))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: EFor({
													expr: EBinop(OpIn, {
														expr: EConst(CIdent(item))
														pos: #pos
													}, {
														expr: EField({
															expr: EConst(CIdent(s))
															pos: #pos
														}, items)
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EBlock([{
														expr: EVars([{
															expr: {
																expr: EBinop(OpAdd, {
																	expr: ECall({
																		expr: EField({
																			expr: EField({
																				expr: EField({
																					expr: EConst(CIdent(item))
																					pos: #pos
																				}, itemData)
																				pos: #pos
																			}, id)
																			pos: #pos
																		}, toString)
																		pos: #pos
																	}, [])
																	pos: #pos
																}, {
																	expr: EField({
																		expr: EConst(CIdent(item))
																		pos: #pos
																	}, level)
																	pos: #pos
																})
																pos: #pos
															}
															isFinal: false
															name: idlvl
															type: null
														}])
														pos: #pos
													}, {
														expr: EIf({
															expr: EBinop(OpEq, {
																expr: ECall({
																	expr: EField({
																		expr: EConst(CIdent(counts))
																		pos: #pos
																	}, get)
																	pos: #pos
																}, [{
																	expr: EConst(CIdent(idlvl))
																	pos: #pos
																}])
																pos: #pos
															}, {
																expr: EConst(CInt(2))
																pos: #pos
															})
															pos: #pos
														}, {
															expr: EBlock([{
																expr: EVars([{
																	expr: {
																		expr: ECall({
																			expr: EField({
																				expr: EConst(CIdent(current))
																				pos: #pos
																			}, filter)
																			pos: #pos
																		}, [{
																			expr: EFunction(FArrow, {
																				args: [{
																					meta: []
																					name: item
																					opt: false
																					type: null
																					value: null
																				}]
																				expr: {
																					expr: EMeta({
																						name: :implicitReturn
																						params: []
																						pos: #pos
																					}, {
																						expr: EReturn({
																							expr: EBinop(OpEq, {
																								expr: EParenthesis({
																									expr: EBinop(OpAdd, {
																										expr: ECall({
																											expr: EField({
																												expr: EField({
																													expr: EField({
																														expr: EConst(CIdent(item))
																														pos: #pos
																													}, itemData)
																													pos: #pos
																												}, id)
																												pos: #pos
																											}, toString)
																											pos: #pos
																										}, [])
																										pos: #pos
																									}, {
																										expr: EField({
																											expr: EConst(CIdent(item))
																											pos: #pos
																										}, level)
																										pos: #pos
																									})
																									pos: #pos
																								})
																								pos: #pos
																							}, {
																								expr: EConst(CIdent(idlvl))
																								pos: #pos
																							})
																							pos: #pos
																						})
																						pos: #pos
																					})
																					pos: #pos
																				}
																				params: []
																				ret: null
																			})
																			pos: #pos
																		}])
																		pos: #pos
																	}
																	isFinal: false
																	name: mergeables
																	type: null
																}])
																pos: #pos
															}, {
																expr: ECall({
																	expr: EConst(CIdent(doMerge))
																	pos: #pos
																}, [{
																	expr: EConst(CIdent(item))
																	pos: #pos
																}, {
																	expr: EArrayDecl([{
																		expr: ECall({
																			expr: EField({
																				expr: EConst(CIdent(mergeables))
																				pos: #pos
																			}, pop)
																			pos: #pos
																		}, [])
																		pos: #pos
																	}, {
																		expr: ECall({
																			expr: EField({
																				expr: EConst(CIdent(mergeables))
																				pos: #pos
																			}, pop)
																			pos: #pos
																		}, [])
																		pos: #pos
																	}])
																	pos: #pos
																}])
																pos: #pos
															}])
															pos: #pos
														}, null)
														pos: #pos
													}])
													pos: #pos
												})
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}])
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}
						params: []
						ret: null
					})
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(autorun))
					pos: #pos
				}, [{
					expr: EFunction(FArrow, {
						args: []
						expr: {
							expr: EMeta({
								name: :implicitReturn
								params: []
								pos: #pos
							}, {
								expr: EReturn({
									expr: EBlock([{
										expr: EFor({
											expr: EBinop(OpIn, {
												expr: EConst(CIdent(sorc))
												pos: #pos
											}, {
												expr: EConst(CIdent(sorcerers))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: EBinop(OpAssign, {
													expr: EField({
														expr: EConst(CIdent(sorc))
														pos: #pos
													}, fighting)
													pos: #pos
												}, {
													expr: EBinop(OpNotEq, {
														expr: EConst(CIdent(gameState))
														pos: #pos
													}, {
														expr: EConst(CIdent(ShopEquip))
														pos: #pos
													})
													pos: #pos
												})
												pos: #pos
											}, {
												expr: EBinop(OpAssign, {
													expr: EField({
														expr: EConst(CIdent(chaleace))
														pos: #pos
													}, fighting)
													pos: #pos
												}, {
													expr: EBinop(OpNotEq, {
														expr: EConst(CIdent(gameState))
														pos: #pos
													}, {
														expr: EConst(CIdent(ShopEquip))
														pos: #pos
													})
													pos: #pos
												})
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EIf({
											expr: EBinop(OpEq, {
												expr: EConst(CIdent(gameState))
												pos: #pos
											}, {
												expr: EConst(CIdent(ShopEquip))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: EFor({
													expr: EBinop(OpIn, {
														expr: EConst(CIdent(sorc))
														pos: #pos
													}, {
														expr: EConst(CIdent(sorcerers))
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EBlock([{
														expr: EBinop(OpAssign, {
															expr: EField({
																expr: EConst(CIdent(sorc))
																pos: #pos
															}, x)
															pos: #pos
														}, {
															expr: EField({
																expr: EConst(CIdent(sorc))
																pos: #pos
															}, boardConfiguredX)
															pos: #pos
														})
														pos: #pos
													}, {
														expr: EBinop(OpAssign, {
															expr: EField({
																expr: EConst(CIdent(sorc))
																pos: #pos
															}, y)
															pos: #pos
														}, {
															expr: EField({
																expr: EConst(CIdent(sorc))
																pos: #pos
															}, boardConfiguredY)
															pos: #pos
														})
														pos: #pos
													}])
													pos: #pos
												})
												pos: #pos
											}, {
												expr: EBinop(OpAssign, {
													expr: EField({
														expr: EConst(CIdent(chaleace))
														pos: #pos
													}, x)
													pos: #pos
												}, {
													expr: EField({
														expr: EConst(CIdent(chaleace))
														pos: #pos
													}, boardConfiguredX)
													pos: #pos
												})
												pos: #pos
											}, {
												expr: EBinop(OpAssign, {
													expr: EField({
														expr: EConst(CIdent(chaleace))
														pos: #pos
													}, y)
													pos: #pos
												}, {
													expr: EField({
														expr: EConst(CIdent(chaleace))
														pos: #pos
													}, boardConfiguredY)
													pos: #pos
												})
												pos: #pos
											}])
											pos: #pos
										}, null)
										pos: #pos
									}])
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}
						params: []
						ret: null
					})
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: new
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: EArrayDecl([{
							expr: EFor({
								expr: EBinop(OpIn, {
									expr: EConst(CIdent(s))
									pos: #pos
								}, {
									expr: EConst(CIdent(sorcerers))
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EConst(CIdent(s))
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: false
					name: arr
					type: TPath({
						name: Array
						pack: []
						params: [TPType(TPath({
							name: BoardEntity
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					})
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(arr))
						pos: #pos
					}, push)
					pos: #pos
				}, [{
					expr: EConst(CIdent(chaleace))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(arr))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: get_boardEntities
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, chaleace)
						pos: #pos
					}, lockIn)
					pos: #pos
				}, {
					expr: EField({
						expr: ECall({
							expr: EField({
								expr: ECall({
									expr: EField({
										expr: EField({
											expr: EConst(CIdent(Data))
											pos: #pos
										}, configs)
										pos: #pos
									}, get)
									pos: #pos
								}, [{
									expr: EConst(CIdent(ChaleaceLockTimeInSec))
									pos: #pos
								}])
								pos: #pos
							}, sure)
							pos: #pos
						}, [])
						pos: #pos
					}, value)
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EFor({
					expr: EBinop(OpIn, {
						expr: EConst(CIdent(sorcerer))
						pos: #pos
					}, {
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, sorcerers)
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(sorcerer))
								pos: #pos
							}, health)
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(sorcerer))
										pos: #pos
									}, calculatedStats)
									pos: #pos
								}, getValue)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Health))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(sorcerer))
								pos: #pos
							}, attackCooldown)
							pos: #pos
						}, {
							expr: EConst(CInt(0))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: resetEntities
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EFor({
					expr: EBinop(OpIn, {
						expr: EConst(CIdent(sorc))
						pos: #pos
					}, {
						expr: EConst(CIdent(sorcerers))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(sorc))
								pos: #pos
							}, moveToPlayerB)
							pos: #pos
						}, [])
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(chaleace))
						pos: #pos
					}, moveToPlayerB)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: moveToPlayerB
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(battles))
								pos: #pos
							}, last)
							pos: #pos
						}, [])
						pos: #pos
					}
					isFinal: false
					name: lastBattle
					type: TPath({
						name: Null
						pack: []
						params: [TPType(TPath({
							name: Battle
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					})
				}])
				pos: #pos
			}, {
				expr: EReturn({
					expr: EBinop(OpBoolOr, {
						expr: EBinop(OpEq, {
							expr: EConst(CIdent(lastBattle))
							pos: #pos
						}, {
							expr: EConst(CIdent(null))
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBinop(OpEq, {
							expr: EField({
								expr: EConst(CIdent(lastBattle))
								pos: #pos
							}, winner)
							pos: #pos
						}, {
							expr: EConst(CIdent(this))
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: isWinnerOfLastBattle
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: 
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, unbindEvents)
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, offNotifyBattleResult)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: unbindEvents
	pos: #pos
}]
line 188: expected enum value
line 230: expected enum value
line 261: expected enum value