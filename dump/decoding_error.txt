[{
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: Assets
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: assets
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TFunction([TPath({
		name: SorcererItem
		pack: []
		params: []
		sub: null
	})], TPath({
		name: SorcererItemActor
		pack: []
		params: []
		sub: null
	})), null)
	meta: []
	name: getItemActor
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: List
		pack: []
		params: [TPType(TPath({
			name: SorcererItemActor
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: []
	name: items
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: Shelf
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: shelf
	pos: #pos
}, {
	access: [APrivate]
	doc: dropAt event
	kind: FFun({
		args: [{
			meta: []
			name: x
			opt: false
			type: TPath({
				name: Int
				pack: []
				params: []
				sub: null
			})
			value: null
		}, {
			meta: []
			name: y
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: emitDropAt
	pos: #pos
}, {
	access: [APublic]
	doc: dropAt event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleXY
			opt: null
			type: TFunction([TPath({
				name: Int
				pack: []
				params: []
				sub: null
			}), null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onDropAt
	pos: #pos
}, {
	access: [APublic]
	doc: dropAt event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleXY
			opt: null
			type: TFunction([TPath({
				name: Int
				pack: []
				params: []
				sub: null
			}), null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onceDropAt
	pos: #pos
}, {
	access: [APublic]
	doc: dropAt event
	kind: FFun({
		args: [{
			meta: null
			name: handleXY
			opt: true
			type: TFunction([TPath({
				name: Int
				pack: []
				params: []
				sub: null
			}), null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: offDropAt
	pos: #pos
}, {
	access: [APublic, AInline]
	doc: Does it listen to dropAt event
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: listensDropAt
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: assets
			opt: false
			type: TPath({
				name: Assets
				pack: []
				params: []
				sub: null
			})
			value: null
		}, {
			meta: []
			name: shelf
			opt: false
			type: TPath({
				name: Shelf
				pack: []
				params: []
				sub: null
			})
			value: null
		}, {
			meta: []
			name: getItemActor
			opt: false
			type: TFunction([TPath({
				name: SorcererItem
				pack: []
				params: []
				sub: null
			})], TPath({
				name: SorcererItemActor
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EConst(CIdent(super))
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, assets)
					pos: #pos
				}, {
					expr: EConst(CIdent(assets))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, shelf)
					pos: #pos
				}, {
					expr: EConst(CIdent(shelf))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, getItemActor)
					pos: #pos
				}, {
					expr: EConst(CIdent(getItemActor))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, items)
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(shelf))
								pos: #pos
							}, items)
							pos: #pos
						}, map)
						pos: #pos
					}, [{
						expr: EFunction(FArrow, {
							args: [{
								meta: []
								name: item
								opt: false
								type: null
								value: null
							}]
							expr: {
								expr: EMeta({
									name: :implicitReturn
									params: []
									pos: #pos
								}, {
									expr: EReturn({
										expr: ECall({
											expr: EConst(CIdent(getItemActor))
											pos: #pos
										}, [{
											expr: EConst(CIdent(item))
											pos: #pos
										}])
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}
							params: []
							ret: null
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(refreshItems))
					pos: #pos
				}, [{
					expr: EField({
						expr: EConst(CIdent(shelf))
						pos: #pos
					}, items)
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, texture)
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(assets))
							pos: #pos
						}, texture)
						pos: #pos
					}, [{
						expr: EField({
							expr: EConst(CIdent(Images))
							pos: #pos
						}, PRELOAD__SHELF)
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(shelf))
						pos: #pos
					}, onItemsChange)
					pos: #pos
				}, [{
					expr: EConst(CIdent(this))
					pos: #pos
				}, {
					expr: EConst(CIdent(refreshItems))
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: new
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: newDraw
			opt: false
			type: TPath({
				name: List
				pack: []
				params: [TPType(TPath({
					name: SorcererItem
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}, {
			meta: []
			name: previousDraw
			opt: false
			type: TPath({
				name: Null
				pack: []
				params: [TPType(TPath({
					name: List
					pack: []
					params: [TPType(TPath({
						name: SorcererItem
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, items)
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(newDraw))
							pos: #pos
						}, map)
						pos: #pos
					}, [{
						expr: EFunction(FArrow, {
							args: [{
								meta: []
								name: item
								opt: false
								type: null
								value: null
							}]
							expr: {
								expr: EMeta({
									name: :implicitReturn
									params: []
									pos: #pos
								}, {
									expr: EReturn({
										expr: ECall({
											expr: EConst(CIdent(getItemActor))
											pos: #pos
										}, [{
											expr: EConst(CIdent(item))
											pos: #pos
										}])
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}
							params: []
							ret: null
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: EField({
							expr: ECall({
								expr: EField({
									expr: ECall({
										expr: EField({
											expr: EField({
												expr: EConst(CIdent(Data))
												pos: #pos
											}, placements)
											pos: #pos
										}, get)
										pos: #pos
									}, [{
										expr: EConst(CIdent(ShelfPadding))
										pos: #pos
									}])
									pos: #pos
								}, sure)
								pos: #pos
							}, [])
							pos: #pos
						}, x)
						pos: #pos
					}
					isFinal: false
					name: padding
					type: null
				}])
				pos: #pos
			}, {
				expr: EFor({
					expr: EBinop(OpArrow, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EBinop(OpIn, {
							expr: EConst(CIdent(actor))
							pos: #pos
						}, {
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, items)
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, add)
							pos: #pos
						}, [{
							expr: EConst(CIdent(actor))
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EVars([{
							expr: {
								expr: EBinop(OpAdd, {
									expr: EConst(CIdent(padding))
									pos: #pos
								}, {
									expr: EBinop(OpMult, {
										expr: EParenthesis({
											expr: EBinop(OpAdd, {
												expr: EField({
													expr: EConst(CIdent(actor))
													pos: #pos
												}, width)
												pos: #pos
											}, {
												expr: EConst(CIdent(padding))
												pos: #pos
											})
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EConst(CIdent(i))
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}
							isFinal: false
							name: x
							type: null
						}])
						pos: #pos
					}, {
						expr: EVars([{
							expr: {
								expr: EBinop(OpDiv, {
									expr: EField({
										expr: EField({
											expr: EConst(CIdent(this))
											pos: #pos
										}, texture)
										pos: #pos
									}, height)
									pos: #pos
								}, {
									expr: EConst(CInt(2))
									pos: #pos
								})
								pos: #pos
							}
							isFinal: false
							name: y
							type: null
						}])
						pos: #pos
					}, {
						expr: EIf({
							expr: EBinop(OpBoolOr, {
								expr: EBinop(OpNotEq, {
									expr: EField({
										expr: EConst(CIdent(actor))
										pos: #pos
									}, x)
									pos: #pos
								}, {
									expr: EConst(CIdent(x))
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EBinop(OpNotEq, {
									expr: EField({
										expr: EConst(CIdent(actor))
										pos: #pos
									}, y)
									pos: #pos
								}, {
									expr: EConst(CIdent(y))
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EBlock([{
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(actor))
										pos: #pos
									}, transition)
									pos: #pos
								}, [{
									expr: EField({
										expr: EConst(CIdent(Easing))
										pos: #pos
									}, QUAD_EASE_IN_OUT)
									pos: #pos
								}, {
									expr: EConst(CFloat(0.25))
									pos: #pos
								}, {
									expr: EFunction(FArrow, {
										args: [{
											meta: []
											name: props
											opt: false
											type: null
											value: null
										}]
										expr: {
											expr: EMeta({
												name: :implicitReturn
												params: []
												pos: #pos
											}, {
												expr: EReturn({
													expr: EBlock([{
														expr: EBinop(OpAssign, {
															expr: EField({
																expr: EConst(CIdent(props))
																pos: #pos
															}, x)
															pos: #pos
														}, {
															expr: EConst(CIdent(x))
															pos: #pos
														})
														pos: #pos
													}, {
														expr: EBinop(OpAssign, {
															expr: EField({
																expr: EConst(CIdent(props))
																pos: #pos
															}, y)
															pos: #pos
														}, {
															expr: EConst(CIdent(y))
															pos: #pos
														})
														pos: #pos
													}])
													pos: #pos
												})
												pos: #pos
											})
											pos: #pos
										}
										params: []
										ret: null
									})
									pos: #pos
								}])
								pos: #pos
							}])
							pos: #pos
						}, null)
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, offPointerDown)
							pos: #pos
						}, [])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, onPointerDown)
							pos: #pos
						}, [{
							expr: EConst(CIdent(this))
							pos: #pos
						}, {
							expr: EFunction(FArrow, {
								args: [{
									meta: []
									name: evt
									opt: false
									type: null
									value: null
								}]
								expr: {
									expr: EMeta({
										name: :implicitReturn
										params: []
										pos: #pos
									}, {
										expr: EReturn({
											expr: EBlock([{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(actor))
														pos: #pos
													}, pos)
													pos: #pos
												}, [{
													expr: EField({
														expr: EConst(CIdent(evt))
														pos: #pos
													}, x)
													pos: #pos
												}, {
													expr: EField({
														expr: EConst(CIdent(evt))
														pos: #pos
													}, y)
													pos: #pos
												}])
												pos: #pos
											}, {
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(screen))
														pos: #pos
													}, oncePointerUp)
													pos: #pos
												}, [{
													expr: EConst(CIdent(this))
													pos: #pos
												}, {
													expr: EFunction(FArrow, {
														args: [{
															meta: []
															name: evt
															opt: false
															type: null
															value: null
														}]
														expr: {
															expr: EMeta({
																name: :implicitReturn
																params: []
																pos: #pos
															}, {
																expr: EReturn({
																	expr: EBlock([{
																		expr: EField({
																			expr: EConst(CIdent(actor))
																			pos: #pos
																		}, i)
																		pos: #pos
																	}])
																	pos: #pos
																})
																pos: #pos
															})
															pos: #pos
														}
														params: []
														ret: null
													})
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									})
									pos: #pos
								}
								params: []
								ret: null
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, offPointerOver)
							pos: #pos
						}, [])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, onPointerOver)
							pos: #pos
						}, [{
							expr: EConst(CIdent(this))
							pos: #pos
						}, {
							expr: EFunction(FArrow, {
								args: [{
									meta: []
									name: evt
									opt: false
									type: null
									value: null
								}]
								expr: {
									expr: EMeta({
										name: :implicitReturn
										params: []
										pos: #pos
									}, {
										expr: EReturn({
											expr: EBlock([{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(actor))
														pos: #pos
													}, transition)
													pos: #pos
												}, [{
													expr: EField({
														expr: EConst(CIdent(Easing))
														pos: #pos
													}, QUAD_EASE_IN_OUT)
													pos: #pos
												}, {
													expr: EConst(CFloat(0.15))
													pos: #pos
												}, {
													expr: EFunction(FArrow, {
														args: [{
															meta: []
															name: props
															opt: false
															type: null
															value: null
														}]
														expr: {
															expr: EMeta({
																name: :implicitReturn
																params: []
																pos: #pos
															}, {
																expr: EReturn({
																	expr: EBlock([{
																		expr: EBinop(OpAssign, {
																			expr: EField({
																				expr: EConst(CIdent(props))
																				pos: #pos
																			}, scaleX)
																			pos: #pos
																		}, {
																			expr: EConst(CFloat(1.1))
																			pos: #pos
																		})
																		pos: #pos
																	}, {
																		expr: EBinop(OpAssign, {
																			expr: EField({
																				expr: EConst(CIdent(props))
																				pos: #pos
																			}, scaleY)
																			pos: #pos
																		}, {
																			expr: EConst(CFloat(1.1))
																			pos: #pos
																		})
																		pos: #pos
																	}])
																	pos: #pos
																})
																pos: #pos
															})
															pos: #pos
														}
														params: []
														ret: null
													})
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									})
									pos: #pos
								}
								params: []
								ret: null
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, offPointerOut)
							pos: #pos
						}, [])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(actor))
								pos: #pos
							}, onPointerOut)
							pos: #pos
						}, [{
							expr: EConst(CIdent(this))
							pos: #pos
						}, {
							expr: EFunction(FArrow, {
								args: [{
									meta: []
									name: evt
									opt: false
									type: null
									value: null
								}]
								expr: {
									expr: EMeta({
										name: :implicitReturn
										params: []
										pos: #pos
									}, {
										expr: EReturn({
											expr: EBlock([{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(actor))
														pos: #pos
													}, transition)
													pos: #pos
												}, [{
													expr: EField({
														expr: EConst(CIdent(Easing))
														pos: #pos
													}, QUAD_EASE_IN_OUT)
													pos: #pos
												}, {
													expr: EConst(CFloat(0.15))
													pos: #pos
												}, {
													expr: EFunction(FArrow, {
														args: [{
															meta: []
															name: props
															opt: false
															type: null
															value: null
														}]
														expr: {
															expr: EMeta({
																name: :implicitReturn
																params: []
																pos: #pos
															}, {
																expr: EReturn({
																	expr: EBlock([{
																		expr: EBinop(OpAssign, {
																			expr: EField({
																				expr: EConst(CIdent(props))
																				pos: #pos
																			}, scaleX)
																			pos: #pos
																		}, {
																			expr: EConst(CInt(1))
																			pos: #pos
																		})
																		pos: #pos
																	}, {
																		expr: EBinop(OpAssign, {
																			expr: EField({
																				expr: EConst(CIdent(props))
																				pos: #pos
																			}, scaleY)
																			pos: #pos
																		}, {
																			expr: EConst(CInt(1))
																			pos: #pos
																		})
																		pos: #pos
																	}])
																	pos: #pos
																})
																pos: #pos
															})
															pos: #pos
														}
														params: []
														ret: null
													})
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										})
										pos: #pos
									})
									pos: #pos
								}
								params: []
								ret: null
							})
							pos: #pos
						}])
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: refreshItems
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: 
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, unbindEvents)
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, offDropAt)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: unbindEvents
	pos: #pos
}]
line 120: expected enum value
line 167: expected enum value
line 203: expected enum value