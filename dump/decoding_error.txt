[{
	access: [APublic]
	doc: null
	kind: FVar(TPath({
		name: SorcererItem
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: item
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: Description
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: description
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: Assets
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: assets
	pos: #pos
}, {
	access: [APrivate]
	doc: mergeInto event
	kind: FFun({
		args: [{
			meta: []
			name: i
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: emitMergeInto
	pos: #pos
}, {
	access: [APublic]
	doc: mergeInto event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleI
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onMergeInto
	pos: #pos
}, {
	access: [APublic]
	doc: mergeInto event
	kind: FFun({
		args: [{
			meta: null
			name: owner
			opt: false
			type: TPath({
				name: Entity
				pack: [ceramic]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: handleI
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: onceMergeInto
	pos: #pos
}, {
	access: [APublic]
	doc: mergeInto event
	kind: FFun({
		args: [{
			meta: null
			name: handleI
			opt: true
			type: TFunction([null <- expected enum value], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			}))
			value: null
		}]
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: offMergeInto
	pos: #pos
}, {
	access: [APublic, AInline]
	doc: Does it listen to mergeInto event
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: listensMergeInto
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: assets
			opt: false
			type: TPath({
				name: Assets
				pack: []
				params: []
				sub: null
			})
			value: null
		}, {
			meta: []
			name: item
			opt: false
			type: TPath({
				name: SorcererItem
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EConst(CIdent(super))
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, item)
					pos: #pos
				}, {
					expr: EConst(CIdent(item))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, assets)
					pos: #pos
				}, {
					expr: EConst(CIdent(assets))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, description)
					pos: #pos
				}, {
					expr: ENew({
						name: Description
						pack: []
						params: []
						sub: null
					}, [{
						expr: ECall({
							expr: EConst(CIdent(getDescription))
							pos: #pos
						}, [{
							expr: EConst(CIdent(item))
							pos: #pos
						}])
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(add))
					pos: #pos
				}, [{
					expr: EConst(CIdent(description))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EField({
							expr: EConst(CIdent(HotLoader))
							pos: #pos
						}, instance)
						pos: #pos
					}, onReload)
					pos: #pos
				}, [{
					expr: EConst(CIdent(this))
					pos: #pos
				}, {
					expr: EConst(CIdent(loadContent))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(loadContent))
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: new
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, texture)
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(assets))
							pos: #pos
						}, textureFromFile)
						pos: #pos
					}, [{
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(item))
								pos: #pos
							}, itemData)
							pos: #pos
						}, image)
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, size)
					pos: #pos
				}, [{
					expr: EConst(CInt(100))
					pos: #pos
				}, {
					expr: EConst(CInt(100))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, anchor)
					pos: #pos
				}, [{
					expr: EConst(CFloat(0.5))
					pos: #pos
				}, {
					expr: EConst(CFloat(0.5))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, description)
							pos: #pos
						}, text)
						pos: #pos
					}, content)
					pos: #pos
				}, {
					expr: ECall({
						expr: EConst(CIdent(getDescription))
						pos: #pos
					}, [{
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, item)
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(description))
						pos: #pos
					}, active)
					pos: #pos
				}, {
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: loadContent
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ENew({
							name: Point
							pack: []
							params: []
							sub: null
						}, [])
						pos: #pos
					}
					isFinal: false
					name: leftLimit
					type: null
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, visualToScreen)
					pos: #pos
				}, [{
					expr: EBinop(OpSub, {
						expr: EBinop(OpMult, {
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, width)
							pos: #pos
						}, {
							expr: EConst(CFloat(0.8))
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EField({
							expr: EConst(CIdent(description))
							pos: #pos
						}, width)
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EConst(CInt(0))
					pos: #pos
				}, {
					expr: EConst(CIdent(leftLimit))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ETernary({
							expr: EBinop(OpLt, {
								expr: EField({
									expr: EConst(CIdent(leftLimit))
									pos: #pos
								}, x)
								pos: #pos
							}, {
								expr: EConst(CInt(20))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EBinop(OpAdd, {
								expr: EUnop(OpNeg, false, {
									expr: EField({
										expr: EConst(CIdent(leftLimit))
										pos: #pos
									}, x)
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EConst(CInt(20))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EConst(CInt(0))
							pos: #pos
						})
						pos: #pos
					}
					isFinal: false
					name: offset
					type: null
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(description))
						pos: #pos
					}, pos)
					pos: #pos
				}, [{
					expr: EBinop(OpAdd, {
						expr: EBinop(OpMult, {
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, width)
							pos: #pos
						}, {
							expr: EConst(CFloat(0.8))
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EConst(CIdent(offset))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EConst(CInt(0))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(description))
						pos: #pos
					}, alpha)
					pos: #pos
				}, {
					expr: EConst(CFloat(0.8))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(description))
						pos: #pos
					}, active)
					pos: #pos
				}, {
					expr: EConst(CIdent(true))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: showDescription
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(description))
						pos: #pos
					}, active)
					pos: #pos
				}, {
					expr: EConst(CIdent(false))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: hideDescription
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: update
	pos: #pos
}, {
	access: [AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: item
			opt: false
			type: TPath({
				name: SorcererItem
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EBinop(OpAdd, {
						expr: EBinop(OpAdd, {
							expr: EBinop(OpAdd, {
								expr: EBinop(OpAdd, {
									expr: EBinop(OpAdd, {
										expr: EConst(CString(, SingleQuotes))
										pos: #pos
									}, {
										expr: EConst(CString(Slot: ${Data.Items_slot.NAMES[item.itemData.slot.toInt()]}
, SingleQuotes))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EParenthesis({
										expr: ETernary({
											expr: EBinop(OpNotEq, {
												expr: EField({
													expr: EField({
														expr: EConst(CIdent(item))
														pos: #pos
													}, itemData)
													pos: #pos
												}, set)
												pos: #pos
											}, {
												expr: EConst(CIdent(null))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EConst(CString(Set "${item.itemData.set.sure().id}"
Set bonus :${item.itemData.set.sure().bonusDescription}
, SingleQuotes))
											pos: #pos
										}, {
											expr: EConst(CString(, SingleQuotes))
											pos: #pos
										})
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EParenthesis({
									expr: ETernary({
										expr: EBinop(OpNotEq, {
											expr: EField({
												expr: EField({
													expr: EConst(CIdent(item))
													pos: #pos
												}, itemData)
												pos: #pos
											}, provideRole)
											pos: #pos
										}, {
											expr: EConst(CIdent(null))
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EConst(CString(Provide "${item.itemData.provideRole.sure().id}"
, SingleQuotes))
										pos: #pos
									}, {
										expr: EConst(CString(, SingleQuotes))
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EParenthesis({
								expr: ETernary({
									expr: EBinop(OpNotEq, {
										expr: EField({
											expr: EField({
												expr: EConst(CIdent(item))
												pos: #pos
											}, itemData)
											pos: #pos
										}, provideBonus)
										pos: #pos
									}, {
										expr: EConst(CIdent(null))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EConst(CString(Gives:
  * ${item.itemData.provideBonus.map(getBonusDescription).join(',
  * ')}
, SingleQuotes))
									pos: #pos
								}, {
									expr: EConst(CString(, SingleQuotes))
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EConst(CString(Id:${item.id}, SingleQuotes))
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: getDescription
	pos: #pos
}, {
	access: [AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: bonus
			opt: false
			type: TPath({
				name: Data
				pack: []
				params: []
				sub: Items_provideBonus
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EConst(CString(${bonus.statId}: ${bonus.flatValue == 0 ? '' : Std.string(bonus.flatValue)}${bonus.percentValue == 0 ? '' : Std.string(bonus.flatValue * 100)}%, SingleQuotes))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: getBonusDescription
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: 
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, unbindEvents)
					pos: #pos
				}, [])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, offMergeInto)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: null
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: []
	name: unbindEvents
	pos: #pos
}]
line 82: expected enum value
line 124: expected enum value
line 155: expected enum value